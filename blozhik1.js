const express = require("express");
// —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const fs=require('fs');
const path =require('path');
const mysql=require('mysql2');
const bodyParser=require('body-parser');


//–ü–æ—Ä—Ç –∏ –ø—É—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –≤—Å–µ—Ö –º–∞—à–∏–Ω–∞—Ö.
const pathS='nodejs';
const port=3000;

const hosT='localhost';
const logiN='chikchicly';
const databasE='nasoberu_nasite';
const passworD='AfmxD!XnlST[r0B9';

// debian-sys-maint',
// database: 'nasoberu_nasite',
// password: 'vmHrqP8Ixuf0fDGt

console.log(__dirname);


app.use(express.static(path.join(__dirname, 'views')));

app.set('view engine', 'ejs');
const UrlencodedParser = express.urlencoded({extended: false});

app.use("/"+`${pathS}`+"/contact", function(request, response){
  response.render('contact', {
      title: '–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã',
      name: 'Amir',
      emailsVisible: true,
      emails: ['nasoberu@nasobe.ru', 'chikchicy@gmail.com'],
      phone: '+79528885656',
    })
});

app.use("/"+`${pathS}`+"/about", function(request, response){
  response.render('about', {
    title: ['about','ok'],
    titleVisible: true,
    article: ['–ï—Å–ª–∏ —É–≥–ª—É–±–ª—è—Ç—å—Å—è –≤ –¥–µ–±—Ä–∏, —Ç–æ –≤—ã—Ö–æ–¥–∏—Ç —á—Ç–æ –Ω–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ ubuntu, —Å–∞–º—ã–µ –≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ —É–º—ã –∏–∑ –≥—É–≥–ª–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ –¥–∞–∂–µ –Ω–µ–º–Ω–æ–∂–µ—á–∫–æ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏, —Å–æ–∑–¥–∞–≤–∞–ª–∏ —Å—É–ø–µ—Ä –±—ã—Å—Ç—Ä—ã–π –∏ –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ V8 –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ª–æ–∂–µ–Ω –≤ –Ω–æ–¥–µ. –í—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ, —à–∏—Ä–æ–∫–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏: –∞–Ω–≥—É–ª—è—Ä, —Ä–µ–∞–∫—Ç, –≤—å—é. –†–∞–±–æ—Ç–∞—é—Ç c nodejs. Nodejs —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –º–Ω–æ–≥–∏–º–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ—Ç—Å—è. –ü–æ—ç—Ç–æ–º—É —Å –Ω–æ–¥–æ–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∫—Ä–∏–≤–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ —Å php –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π —Å mysql and phpmyadmin. –ò –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–Ω –±—É–¥–µ—Ç —à–∏–∫–∞—Ä–Ω–æ, –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω–æ –∏ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ. –ù–∏–∫—Ç–æ –¥–∞–∂–µ –∏ –ø–æ–¥—É–º–∞—Ç—å –Ω–µ –≤–∑–¥—É–º–∞–µ—Ç —á—Ç–æ —ç—Ç–æ—Ç –±–ª–æ–≥ –Ω–∞–ø–∏—Å–∞–Ω –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º –¥–≤–æ–µ—á–Ω–∏–∫–æ–º, –∑–µ–ø–µ—ç—Ä–æ—à–Ω–∏–∫–æ–º —Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–º –∞–ª–∫–æ–≥–æ–ª–∏–∑–º–æ–º –∏ —Å–µ—Ä—å–µ–∑–Ω—ã–º–∏ —Å–º–µ—Ö–æ–¥–∑–∏–ª–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏—Å—Ç—É–ø–∞–º–∏(–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–∞—é—Ç—Å—è –ª–µ—á–µ–Ω–∏—é).  ü§î','–í—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–µ–± –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –∏–º–µ–Ω–∏ –±–∞—Ä–æ–Ω–∞ —Å–∞–π—Ç–æ–≤–µ—Ä—Å—Ç–∞—É–∑–µ–Ω–∞ –∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –º–∏—Ä —á—É—Ç–æ—á–∫—É –ª—É—á—à–µ!'],
    backstory: '–≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –≤–µ–± –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∏–º–µ–Ω–∏ "–±–∞—Ä–æ–Ω–∞ —Å–∞–π—Ç–æ–≤–µ—Ä—Å—Ç–∞—É–∑–µ–Ω–∞", —Ü–µ–ª—å —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äú—Ä–∞–±–æ—Ç–∞—é—â–µ–π –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å –≥–∏—Ç—Ö–∞–±–∞‚Äù –∫–∞–∫ –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –≤–æ–æ–±—â–µ —ç—Ç–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ –ø–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ –Ω–∞—Ü–∏–æ–Ω–∞–ª —Å–æ—Ü–∏–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ü–ª–∞–≥–µ—Ä–µ, –∏ –ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ, –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ–∑–∞–∫–æ–Ω–Ω—É—é —Ç—Ä—É–¥–æ–≤—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–π—Ç–∏ —Å–ø–æ—Å–æ–± —á—Ç–æ–±—ã —Ç—Ä—É–¥–æ–≤–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—ã–ª–∞ –∑–∞–∫–æ–Ω–Ω–æ–π –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ–º–æ–π.',
    name: "namE"
  });
});

const connection = mysql.createConnection({
  host: hosT,
  user: logiN,
  database: databasE,
  password: passworD
});
connection.connect(err=>{
  if(err){
    return err;
    console.log('err');
  }else{
    console.log('database--- oK');
  }
});
const sql = `SELECT * FROM article`;
¬†
connection.query(sql, function(err, results) {
¬†¬†¬†¬†if(err) console.log(err);
// ¬†¬†¬†¬†console.log(results[1]['title']);
for(let oj=0;oj<results.length;oj++){
  app.use("/"+`${pathS}`+"/"+`${results[oj]['url']}`, function(request, response){
    response.render('index', {
      title: `${results[oj]['title']}`,
      description: `${results[oj]['description']}`,
      article: `${results[oj]['text']}`,
      autor: `${results[oj]['autor']}`,
      url: `${results[oj]['url']}`,
      json: `${results[oj]['JSON']}`,
      id: `${results[oj]['id']}`
    });
  });
}//for

});//connection

//REQUIRE-REQUEST FILE-----------------------

// let data=JSON.stringify(dat);
// fs.readFileSync('title.json', data);
// let titleJSONparse=JSON.parse(titleJSON);
// console.log(titleJSONparse);
// console.log(titleJSON);
let okcap = "SELECT * FROM `article`";
connection.query(okcap, function(err, result) {
¬†¬†¬†¬†if(err) console.log(err);
// console.log(result['title']);
    // –ß–∏—Å–ª–æ –ø–æ—Å—Ç–æ–≤ –±–æ–ª—å—à–µ –≤ –≤—ã–±–æ—Ä–∫–µ –±–¥, –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–∑–≤–æ—Ä–∞—á–∏–≤–∞–ª—Å—è –∫–∞–∫ –º–æ–≥.
    fs.stat('txt_json/new.json',(error)=>{
      if(error){
        console.log("file non");
        for(let oj=0;oj<result.length;oj++){
          //—Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ
          let data = JSON.stringify(result[`${oj}`]['title']);
          fs.appendFileSync('txt_json/title.json', data+",");
          let dataDes = JSON.stringify(result[`${oj}`]['description']);
          fs.appendFileSync('txt_json/description.json', dataDes+",");
          let dataUrl = JSON.stringify(result[`${oj}`]['url']);
          fs.appendFileSync('txt_json/url.json', dataUrl+",");
        }//for
        return;
      }else{
        let readCout=fs.readFileSync('txt_json/new.json','utf8');
        let readJson=JSON.parse(readCout);
        console.log(readJson.title.length-1);
        console.log(result.length);

        if(result.length<readJson.title.length-1||result.length>readJson.title.length-1){
          fs.unlink('txt_json/description.json',err=>{
            if(err) throw err;
            console.log('File delet');
          });
          fs.unlink('txt_json/new.json',err=>{
            if(err) throw err;
            console.log('File delet');
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É txt_json
            fs.stat("txt_json/title.json",(err,stats)=>{
              if(err){
                //result[`${oj}`]['title']
                for(let oj=0;oj<result.length;oj++){
                  // console.log(onK[oj].title+ " _ "+'onK['+oj+']');
                  // console.log(onK[oj]['description']+ " _ "+'onK['+oj+']');
                  let data = JSON.stringify(result[`${oj}`]['title']);
                  fs.appendFileSync('txt_json/title.json', data+",");
                }//for
                // console.log(data);
                console.log(err);
              }else{
                // let req=require('./title.json');
                // console.log(req);
                console.log('YesFile1'+' -'+ 'req' );
                // 'use strict';
                // let jsonData = require('./student.json');
                //             let jsonData= fs.readFileSync('title.json','utf8');
                //             let onK=JSON.parse(jsonData);
              }
            });

            fs.stat("txt_json/description.json",(err,stats)=>{
              if(err){
                //result[`${oj}`]['title']
                for(let oj=0;oj<result.length;oj++){
                  let dataDes = JSON.stringify(result[`${oj}`]['description']);
                  fs.appendFileSync('txt_json/description.json', dataDes+",");
                }//for
                console.log(err);
              }else{
                console.log('YesFile22222222'+' -'+ 'req' );
              }
            });
            fs.stat("txt_json/url.json",(err,stats)=>{
              if(err){
                for(let oj=0;oj<result.length;oj++){
                  let dataUrl = JSON.stringify(result[`${oj}`]['url']);
                  fs.appendFileSync('txt_json/url.json', dataUrl+",");
                }//for
                console.log(err);
              }else{
                console.log('Yes33333333333'+' -'+ 'req' );
              }
            });
          });
          fs.unlink('txt_json/newDescription.json',err=>{
            if(err) throw err;
            console.log('File delet');
          });
          fs.unlink('txt_json/newUrl.json',err=>{
            if(err) throw err;
            console.log('File delet');
          });
          fs.unlink('txt_json/title.json',err=>{
            if(err) throw err;
            console.log('File delet');
          });
          fs.unlink('txt_json/url.json',err=>{
            if(err) throw err;
            console.log('File delet');
          });
          console.log('unlink '+result.length+"_"+readJson.title.length);
        }
      }
    });


    setTimeout(()=>{ // –≤—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ —â–æ–± –Ω–µ–±—ã–ª–æ –æ—à–∏–±–æ–∫!
      //TITLE
      let fileContent = fs.readFileSync('txt_json/title.json', "utf8");
      let finalFantasy = fs.writeFileSync('txt_json/new.json', "{\n"+"\"title\":"+" ["+fileContent+"\" \""+" ]"+" \n}" );
      let writeFile=fs.readFileSync('txt_json/new.json',"utf8");
      let newTitle=JSON.parse(writeFile);

      //DESCRIPTION
      let fileContentDesc = fs.readFileSync('txt_json/description.json', "utf8");
      let finalFantasyDesc = fs.writeFileSync('txt_json/newDescription.json', "{\n"+"\"description\":"+" ["+fileContentDesc+"\" \""+" ]"+" \n}" );
      let writeFileDesc=fs.readFileSync('txt_json/newDescription.json',"utf8");
      let newDescription=JSON.parse(writeFileDesc);

      //URL
      let fileContentUrl = fs.readFileSync('txt_json/url.json', "utf8");
      let finalFantasyUrl = fs.writeFileSync('txt_json/newUrl.json', "{\n"+"\"url\":"+" ["+fileContentUrl+"\" \""+" ]"+" \n}" );
      let writeFileUrl=fs.readFileSync('txt_json/newUrl.json',"utf8");
      let newUrl=JSON.parse(writeFileUrl);

      console.log(newTitle.title.length+"_ –ü–æ—Å—Ç–∞ –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.");
      app.use("/"+`${pathS}`+"/", function(request, response){
        response.render('list', {
          title: newTitle.title,
          description:newDescription.description,
          url:newUrl.url,
          result: [`${result.length}`]
        });
      });

    },100);
// };//for
      connection.end(err=>{
        if(err){
          return err;
          console.log('err');
        }else{
          console.log('database--- closed');
        }
      });
    })//connerction


app.listen(port);
